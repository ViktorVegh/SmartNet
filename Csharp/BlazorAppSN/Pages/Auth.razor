@page "/auth"
@using IWebSocketService
@using Models.UserManagement
@inject IAuthWebSocketService AuthWebSocketService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<NavMenu />

<h3>@(isRegistering ? "Register" : "Login")</h3>

<EditForm Model="@(isRegistering ? (object)registerUser : loginUser)" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (isRegistering)
    {
        <InputText @bind-Value="registerUser.Username" placeholder="Username" />
        <InputText type="password" @bind-Value="registerUser.PasswordHash" placeholder="Password" />
        <InputText @bind-Value="registerUser.Email" placeholder="Email" />
        <InputText @bind-Value="registerUser.FirstName" placeholder="First Name" />
        <InputText @bind-Value="registerUser.LastName" placeholder="Last Name" />
        <InputText @bind-Value="registerUser.ProfilePicture" placeholder="Profile Picture URL" />
    }
    else
    {
        <InputText @bind-Value="loginUser.Username" placeholder="Username" />
        <InputText type="password" @bind-Value="loginUser.PasswordHash" placeholder="Password" />
    }

    <button type="submit">@submitButtonText</button>
</EditForm>

<button @onclick="ToggleForm">@toggleButtonText</button>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private RegisterUser registerUser = new RegisterUser();
    private LoginUser loginUser = new LoginUser();
    private bool isRegistering = true;
    private string message = string.Empty;

    private string submitButtonText => isRegistering ? "Register" : "Login";
    private string toggleButtonText => isRegistering ? "Switch to Login" : "Switch to Register";

    private async Task HandleValidSubmit()
    {
        await AuthWebSocketService.ConnectAsync(); 

        AuthResponse response;

        if (isRegistering)
        {
            try
            {
                response = await AuthWebSocketService.RegisterUserAsync(registerUser);
                if (!string.IsNullOrEmpty(response?.Token))
                {
                    await LocalStorage.SetItemAsync("authToken", response.Token);
                    message = "Registration successful.";
                    Navigation.NavigateTo("/");
                }
                else
                {
                    message = $"Registration failed: {response?.ErrorMessage}";
                }
            }
            catch (Exception ex)
            {
                message = $"Registration failed: {ex.Message}";
            }
        }
        else
        {
            try
            {
                response = await AuthWebSocketService.LoginUserAsync(loginUser);
                if (!string.IsNullOrEmpty(response?.Token))
                {
                    await LocalStorage.SetItemAsync("authToken", response.Token);
                    message = "Login successful.";
                    Navigation.NavigateTo("/");
                }
                else
                {
                    message = $"Login failed: {response?.ErrorMessage}";
                }
            }
            catch (Exception ex)
            {
                message = $"Login failed: {ex.Message}";
            }
        }

        await AuthWebSocketService.CloseAsync(); 
    }

    private void ToggleForm()
    {
        isRegistering = !isRegistering;
        message = string.Empty;
    }
}
